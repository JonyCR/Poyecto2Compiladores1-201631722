/* The following code was generated by JFlex 1.7.0 */


/*------------  1ra Area: Codigo de Usuario ---------*/
//------> Paquetes, Importaciones
package backend.analizadores;
import java_cup.runtime.*;

/*------------  2da Area: Opciones y Declaraciones ---------*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Segundo_A_Lexico.flex</tt>
 */
public class Segundo_Analizador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     6,  6,  6,  6,  6,  6,  6,  6,  6,  5,  4, 74,  5,  3,  6,  6, 
     6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  0,  0,  0,  0, 
     5,  0, 23, 73,  6, 72,  7,  0, 27, 28, 34, 31, 29, 32,  0, 33, 
     1, 68,  1,  1,  1,  1,  1,  1,  1,  1, 24, 25, 45, 30, 44,  0, 
     0, 36, 54, 58, 46, 51, 48, 55, 50, 39, 62, 60, 42, 56, 19, 43, 
    35, 66, 47, 52, 49, 38, 67, 53, 59, 57, 65, 22,  0, 26,  0,  6, 
     0, 11, 37, 14, 20, 16, 61, 10, 40, 17, 62, 69,  8, 12, 21, 18, 
    13, 71, 41, 63,  9, 15,  2, 64, 59, 70, 65,  0,  0,  0,  0,  6, 
     6,  6,  6,  6,  6, 75,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6, 
     6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6, 
     0,  0,  6,  6,  6,  6,  0,  0,  0,  0,  6,  0,  0,  6,  0,  0, 
     0,  0,  0,  0,  0,  6,  0,  0,  0,  0,  6,  0,  0,  0,  0,  0, 
     6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6, 
     6,  6,  6,  6,  6,  6,  6,  0,  6,  6,  6,  6,  6,  6,  6,  6, 
     6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6, 
     6,  6,  6,  6,  6,  6,  6,  0,  6,  6,  6,  6,  6,  6,  6,  6
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\1\5\1\1\2\3"+
    "\1\6\1\7\1\3\1\10\1\11\2\3\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\7\1\6\1\27\1\11\2\3"+
    "\1\30\1\31\5\3\1\27\4\3\11\0\1\32\6\3"+
    "\1\33\1\34\2\3\14\0\1\35\15\0\1\36\5\3"+
    "\1\37\1\3\1\40\2\3\1\41\1\42\1\43\1\44"+
    "\1\45\4\3\1\46\15\3\1\47\1\50\10\0\11\3"+
    "\1\51\5\0\1\52\20\0\1\53\3\0\1\54\1\3"+
    "\1\55\13\3\1\56\2\3\1\57\3\3\1\60\1\61"+
    "\6\3\1\62\1\0\1\63\6\0\1\64\1\65\1\3"+
    "\1\66\3\3\1\67\1\70\1\71\30\0\4\3\1\72"+
    "\1\3\1\73\1\74\1\75\1\76\1\77\1\3\1\100"+
    "\1\101\1\102\2\3\1\103\5\3\7\0\1\104\1\105"+
    "\1\3\1\106\17\0\1\107\10\0\1\110\1\111\3\3"+
    "\1\112\1\113\2\3\1\114\1\115\1\3\1\116\7\0"+
    "\1\117\1\120\1\121\1\122\1\123\1\0\1\124\5\0"+
    "\1\125\1\126\1\0\1\127\10\0\3\3\1\130\1\131"+
    "\1\3\1\132\1\133\1\134\1\135\1\136\1\137\1\140"+
    "\1\141\4\0\1\142\1\143\1\144\4\0\1\145\2\0"+
    "\1\3\1\146\1\147\1\150\1\151\1\152\1\153\1\154"+
    "\1\155\2\0\1\156\1\157\1\0\1\3\1\160\1\0"+
    "\1\161\1\3\1\0\1\162\1\163";

  private static int [] zzUnpackAction() {
    int [] result = new int[398];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\230\0\344\0\u0130\0\114\0\u017c\0\u01c8"+
    "\0\u0214\0\u0260\0\u02ac\0\344\0\u02f8\0\u0344\0\344\0\u0390"+
    "\0\u03dc\0\114\0\u0428\0\u0474\0\114\0\114\0\114\0\114"+
    "\0\114\0\114\0\114\0\114\0\114\0\114\0\u04c0\0\u050c"+
    "\0\u0558\0\u05a4\0\u05f0\0\u063c\0\u0688\0\u06d4\0\u0720\0\u076c"+
    "\0\u07b8\0\u0804\0\u0850\0\u089c\0\u08e8\0\u0934\0\u0980\0\u09cc"+
    "\0\u0a18\0\u0a64\0\u0ab0\0\u0afc\0\u0b48\0\u0b94\0\u0be0\0\u0c2c"+
    "\0\u0c78\0\u0cc4\0\u0d10\0\u0d5c\0\u0da8\0\u0df4\0\u0e40\0\u0e8c"+
    "\0\344\0\344\0\u0ed8\0\u0f24\0\u0f70\0\u0fbc\0\u1008\0\u1054"+
    "\0\u10a0\0\u10ec\0\u1138\0\u1184\0\u11d0\0\u121c\0\u1268\0\u12b4"+
    "\0\114\0\u1300\0\u134c\0\u1398\0\u13e4\0\u1430\0\u147c\0\u14c8"+
    "\0\u1514\0\u1560\0\u15ac\0\u15f8\0\u1644\0\u1690\0\114\0\u16dc"+
    "\0\u1728\0\u1774\0\u17c0\0\u180c\0\344\0\u1858\0\344\0\u18a4"+
    "\0\u18f0\0\u193c\0\344\0\114\0\114\0\114\0\u1988\0\u19d4"+
    "\0\u1a20\0\u1a6c\0\344\0\u1ab8\0\u1b04\0\u1b50\0\u1b9c\0\u1be8"+
    "\0\u1c34\0\u1c80\0\u1ccc\0\u1d18\0\u1d64\0\u1db0\0\u1dfc\0\u1e48"+
    "\0\114\0\114\0\u1e94\0\u1ee0\0\u1f2c\0\u1f78\0\u1fc4\0\u2010"+
    "\0\u205c\0\u20a8\0\u20f4\0\u2140\0\u218c\0\u21d8\0\u2224\0\u2270"+
    "\0\u22bc\0\u2308\0\u2354\0\114\0\u23a0\0\u23ec\0\u2438\0\u2484"+
    "\0\u24d0\0\114\0\u251c\0\u2568\0\u25b4\0\u2600\0\u264c\0\u2698"+
    "\0\u26e4\0\u2730\0\u277c\0\u27c8\0\u2814\0\u2860\0\u28ac\0\u28f8"+
    "\0\u2944\0\u2990\0\114\0\u29dc\0\u2a28\0\u2a74\0\114\0\u2ac0"+
    "\0\344\0\u2b0c\0\u2b58\0\u2ba4\0\u2bf0\0\u2c3c\0\u2c88\0\u2cd4"+
    "\0\u2d20\0\u2d6c\0\u2db8\0\u2e04\0\344\0\u2e50\0\u2e9c\0\344"+
    "\0\u2ee8\0\u2f34\0\u2f80\0\344\0\344\0\u2fcc\0\u3018\0\u3064"+
    "\0\u30b0\0\u30fc\0\u3148\0\344\0\u3194\0\114\0\u31e0\0\u322c"+
    "\0\u3278\0\u32c4\0\u3310\0\u335c\0\344\0\344\0\u33a8\0\344"+
    "\0\u33f4\0\u3440\0\u348c\0\344\0\344\0\114\0\u34d8\0\u3524"+
    "\0\u3570\0\u35bc\0\u3608\0\u3654\0\u36a0\0\u36ec\0\u3738\0\u3784"+
    "\0\u37d0\0\u381c\0\u3868\0\u38b4\0\u3900\0\u394c\0\u3998\0\u39e4"+
    "\0\u3a30\0\u3a7c\0\u3ac8\0\u3b14\0\u3b60\0\u3bac\0\u3bf8\0\u3c44"+
    "\0\u3c90\0\u3cdc\0\344\0\u3d28\0\344\0\344\0\344\0\344"+
    "\0\344\0\u3d74\0\344\0\344\0\344\0\u3dc0\0\u3e0c\0\344"+
    "\0\u3e58\0\u3ea4\0\u3ef0\0\u3f3c\0\u3f88\0\u3fd4\0\u4020\0\u406c"+
    "\0\u40b8\0\u4104\0\u4150\0\u419c\0\344\0\344\0\u41e8\0\344"+
    "\0\u4234\0\u4280\0\u42cc\0\u4318\0\u4364\0\u43b0\0\u43fc\0\u4448"+
    "\0\u4494\0\u44e0\0\u452c\0\u4578\0\u45c4\0\u4610\0\u465c\0\114"+
    "\0\u46a8\0\u46f4\0\u4740\0\u478c\0\u47d8\0\u4824\0\u4870\0\u48bc"+
    "\0\344\0\344\0\u4908\0\u4954\0\u49a0\0\344\0\344\0\u49ec"+
    "\0\u4a38\0\344\0\344\0\u4a84\0\344\0\u4ad0\0\u4b1c\0\u4b68"+
    "\0\u4bb4\0\u4c00\0\u4c4c\0\u4c98\0\344\0\114\0\114\0\114"+
    "\0\114\0\u4ce4\0\114\0\u4d30\0\u4d7c\0\u4dc8\0\u4e14\0\u4e60"+
    "\0\114\0\114\0\u4eac\0\114\0\u4ef8\0\u4f44\0\u4f90\0\u4fdc"+
    "\0\u5028\0\u5074\0\u50c0\0\u510c\0\u5158\0\u51a4\0\u51f0\0\344"+
    "\0\344\0\u523c\0\114\0\114\0\114\0\114\0\114\0\114"+
    "\0\114\0\114\0\u5288\0\u52d4\0\u5320\0\u536c\0\114\0\114"+
    "\0\114\0\u53b8\0\u5404\0\u5450\0\u549c\0\114\0\u54e8\0\u5534"+
    "\0\u5580\0\344\0\344\0\344\0\114\0\114\0\114\0\114"+
    "\0\114\0\u55cc\0\u5618\0\114\0\114\0\u5664\0\u56b0\0\114"+
    "\0\u56fc\0\114\0\u5748\0\u5794\0\344\0\114";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[398];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\4\1\13\1\4\1\14\1\15\1\16"+
    "\1\4\1\17\1\20\1\21\1\4\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\16\1\42"+
    "\1\43\1\4\1\11\1\44\1\45\1\46\2\4\1\47"+
    "\1\50\1\43\1\51\1\52\1\53\1\54\3\4\1\15"+
    "\2\4\1\55\1\4\1\56\1\57\2\4\1\60\1\3"+
    "\3\4\2\2\117\0\1\3\102\0\1\3\10\0\2\4"+
    "\3\0\1\4\1\0\16\4\15\0\11\4\2\0\32\4"+
    "\3\0\1\4\4\0\1\6\114\0\1\7\116\0\1\61"+
    "\1\0\1\62\1\63\3\0\1\64\1\65\1\66\1\67"+
    "\1\70\1\0\1\71\67\0\2\4\3\0\1\4\1\0"+
    "\11\4\1\72\4\4\15\0\4\4\1\72\4\4\2\0"+
    "\32\4\3\0\1\4\1\0\2\4\3\0\1\4\1\0"+
    "\10\4\1\73\1\74\4\4\15\0\4\4\1\74\4\4"+
    "\2\0\5\4\1\73\5\4\1\75\14\4\1\75\1\4"+
    "\3\0\1\4\1\0\2\4\3\0\1\4\1\0\1\76"+
    "\15\4\15\0\7\4\1\76\1\4\2\0\32\4\3\0"+
    "\1\4\1\0\2\4\3\0\1\4\1\0\10\4\1\77"+
    "\1\4\1\100\3\4\15\0\10\4\1\100\2\0\5\4"+
    "\1\77\24\4\3\0\1\4\1\0\2\4\3\0\1\4"+
    "\1\0\1\101\15\4\15\0\7\4\1\101\1\4\2\0"+
    "\32\4\3\0\1\4\1\0\2\4\3\0\1\4\1\0"+
    "\1\102\15\4\15\0\7\4\1\102\1\4\2\0\32\4"+
    "\3\0\1\4\1\0\2\4\3\0\1\4\1\0\3\4"+
    "\1\103\6\4\1\104\3\4\15\0\1\4\1\103\6\4"+
    "\1\104\2\0\32\4\3\0\1\4\1\105\1\106\6\105"+
    "\1\107\1\110\1\111\1\112\1\113\1\114\1\115\3\105"+
    "\1\116\1\105\1\117\1\120\1\105\1\121\14\105\1\122"+
    "\1\123\3\105\1\124\1\125\3\105\1\117\1\126\4\105"+
    "\1\127\5\105\1\115\2\105\1\130\1\131\1\132\1\133"+
    "\3\105\1\134\1\105\1\135\2\105\1\136\2\105\36\0"+
    "\1\137\56\0\2\4\3\0\1\4\1\0\16\4\15\0"+
    "\11\4\2\0\1\4\1\140\30\4\3\0\1\4\1\0"+
    "\2\4\3\0\1\4\1\0\1\76\12\4\1\141\2\4"+
    "\15\0\7\4\1\76\1\4\2\0\32\4\3\0\1\4"+
    "\1\0\2\4\3\0\1\4\1\0\1\142\1\4\1\143"+
    "\7\4\1\144\3\4\15\0\6\4\1\145\1\142\1\144"+
    "\2\0\1\4\1\145\7\4\1\143\20\4\3\0\1\4"+
    "\1\0\2\4\3\0\1\4\1\0\13\4\1\146\2\4"+
    "\15\0\11\4\2\0\2\4\1\147\27\4\3\0\1\4"+
    "\1\0\2\4\3\0\1\4\1\0\1\4\1\150\6\4"+
    "\1\151\5\4\15\0\6\4\1\152\2\4\2\0\1\4"+
    "\1\152\1\4\1\150\1\4\1\151\24\4\3\0\1\4"+
    "\1\0\2\4\3\0\1\4\1\0\1\102\15\4\15\0"+
    "\7\4\1\102\1\4\2\0\1\4\1\153\30\4\3\0"+
    "\1\4\36\0\1\154\113\0\1\155\15\0\1\156\40\0"+
    "\2\4\3\0\1\4\1\0\3\4\1\157\6\4\1\160"+
    "\3\4\15\0\1\4\1\161\6\4\1\162\2\0\32\4"+
    "\3\0\1\4\1\0\2\4\3\0\1\4\1\0\10\4"+
    "\1\73\1\74\4\4\15\0\4\4\1\74\3\4\1\163"+
    "\2\0\1\4\1\164\2\4\1\165\1\73\5\4\1\75"+
    "\14\4\1\75\1\4\3\0\1\4\1\0\2\4\3\0"+
    "\1\4\1\0\13\4\1\166\2\4\15\0\7\4\1\167"+
    "\1\4\2\0\32\4\3\0\1\4\1\0\2\4\3\0"+
    "\1\4\1\0\1\4\1\170\5\4\1\171\1\4\1\172"+
    "\4\4\15\0\3\4\1\171\1\172\4\4\2\0\3\4"+
    "\1\173\26\4\3\0\1\4\1\0\2\4\3\0\1\4"+
    "\1\0\11\4\1\174\4\4\15\0\4\4\1\174\4\4"+
    "\2\0\4\4\1\175\25\4\3\0\1\4\1\0\2\4"+
    "\3\0\1\4\1\0\1\142\1\4\1\143\7\4\1\144"+
    "\3\4\15\0\6\4\1\145\1\142\1\176\2\0\1\4"+
    "\1\145\3\4\1\177\3\4\1\143\20\4\3\0\1\4"+
    "\1\0\2\4\3\0\1\4\1\0\3\4\1\157\6\4"+
    "\1\160\3\4\15\0\1\4\1\157\6\4\1\160\2\0"+
    "\32\4\3\0\1\4\1\0\2\4\3\0\1\4\1\0"+
    "\1\4\1\170\5\4\1\171\1\4\1\172\4\4\15\0"+
    "\3\4\1\171\1\172\4\4\2\0\3\4\1\170\26\4"+
    "\3\0\1\4\1\0\2\4\3\0\1\4\1\0\11\4"+
    "\1\174\4\4\15\0\4\4\1\174\4\4\2\0\32\4"+
    "\3\0\1\4\1\0\2\4\3\0\1\4\1\0\16\4"+
    "\15\0\1\4\1\200\7\4\2\0\32\4\3\0\1\4"+
    "\11\0\1\201\113\0\1\202\115\0\1\203\1\204\112\0"+
    "\1\205\113\0\1\206\113\0\1\207\113\0\1\210\111\0"+
    "\1\211\113\0\1\212\103\0\2\4\3\0\1\4\1\0"+
    "\13\4\1\213\1\4\1\213\15\0\11\4\2\0\32\4"+
    "\3\0\1\4\1\0\2\4\3\0\1\4\1\0\16\4"+
    "\15\0\11\4\2\0\15\4\1\214\14\4\3\0\1\4"+
    "\1\0\2\4\3\0\1\4\1\0\1\4\1\215\14\4"+
    "\15\0\11\4\2\0\3\4\1\215\26\4\3\0\1\4"+
    "\1\0\2\4\3\0\1\4\1\0\5\4\1\216\10\4"+
    "\15\0\1\216\10\4\2\0\32\4\3\0\1\4\1\0"+
    "\2\4\3\0\1\4\1\0\11\4\1\217\4\4\15\0"+
    "\4\4\1\217\4\4\2\0\32\4\3\0\1\4\1\0"+
    "\2\4\3\0\1\4\1\0\13\4\1\220\1\4\1\220"+
    "\15\0\11\4\2\0\32\4\3\0\1\4\1\0\2\4"+
    "\3\0\1\4\1\0\1\221\15\4\15\0\7\4\1\221"+
    "\1\4\2\0\32\4\3\0\1\4\1\0\2\4\3\0"+
    "\1\4\1\0\4\4\1\222\11\4\15\0\11\4\2\0"+
    "\12\4\1\222\17\4\3\0\1\4\1\0\2\4\3\0"+
    "\1\4\1\0\16\4\15\0\2\4\1\223\6\4\2\0"+
    "\10\4\1\223\21\4\3\0\1\4\27\105\1\121\65\105"+
    "\1\106\25\105\1\224\54\105\1\106\3\105\1\225\23\105"+
    "\1\226\1\227\5\105\1\121\33\105\1\226\50\105\1\230"+
    "\6\105\1\121\113\105\1\121\21\105\1\231\71\105\1\232"+
    "\57\105\1\233\17\105\1\234\13\105\1\121\103\105\1\235"+
    "\7\105\1\121\104\105\1\236\1\237\5\105\1\121\17\105"+
    "\1\237\13\105\1\236\40\105\1\240\16\105\1\121\105\105"+
    "\1\241\5\105\1\121\17\105\1\241\57\105\1\242\13\105"+
    "\1\121\113\105\1\232\74\105\1\243\16\105\1\121\104\105"+
    "\1\244\1\245\5\105\1\121\17\105\1\245\64\105\1\226"+
    "\6\105\1\121\33\105\1\226\51\105\1\245\5\105\1\121"+
    "\17\105\1\245\73\105\1\121\52\105\1\246\4\105\1\246"+
    "\23\105\1\247\7\105\1\121\103\105\1\250\7\105\1\121"+
    "\16\105\1\250\66\105\1\251\5\105\1\121\52\105\1\246"+
    "\4\105\1\246\33\105\1\121\20\105\1\252\44\105\1\106"+
    "\25\105\1\253\54\105\1\106\3\105\1\225\23\105\1\254"+
    "\6\105\1\121\64\105\1\255\1\256\11\255\1\256\2\255"+
    "\1\256\1\255\1\256\3\255\1\256\2\255\1\257\14\255"+
    "\2\256\10\255\1\256\1\255\1\256\2\255\1\256\2\255"+
    "\1\256\3\255\1\256\2\255\1\256\6\255\1\256\7\255"+
    "\1\0\2\4\3\0\1\4\1\0\16\4\15\0\4\4"+
    "\1\260\4\4\2\0\32\4\3\0\1\4\1\0\2\4"+
    "\3\0\1\4\1\0\16\4\15\0\11\4\2\0\1\261"+
    "\31\4\3\0\1\4\1\0\2\4\3\0\1\4\1\0"+
    "\11\4\1\262\1\263\3\4\15\0\4\4\1\262\3\4"+
    "\1\263\2\0\32\4\3\0\1\4\1\0\2\4\3\0"+
    "\1\4\1\0\6\4\1\264\7\4\15\0\11\4\2\0"+
    "\14\4\1\264\15\4\3\0\1\4\1\0\2\4\3\0"+
    "\1\4\1\0\14\4\1\265\1\4\15\0\11\4\2\0"+
    "\1\265\31\4\3\0\1\4\1\0\2\4\3\0\1\4"+
    "\1\0\16\4\15\0\11\4\2\0\3\4\1\266\26\4"+
    "\3\0\1\4\1\0\2\4\3\0\1\4\1\0\4\4"+
    "\1\267\11\4\15\0\11\4\2\0\12\4\1\267\17\4"+
    "\3\0\1\4\1\0\2\4\3\0\1\4\1\0\3\4"+
    "\1\270\12\4\15\0\1\4\1\270\7\4\2\0\32\4"+
    "\3\0\1\4\1\0\2\4\3\0\1\4\1\0\10\4"+
    "\1\271\5\4\15\0\11\4\2\0\5\4\1\271\24\4"+
    "\3\0\1\4\1\0\2\4\3\0\1\4\1\0\6\4"+
    "\1\272\7\4\15\0\11\4\2\0\14\4\1\272\15\4"+
    "\3\0\1\4\1\0\2\4\3\0\1\4\1\0\13\4"+
    "\1\273\1\4\1\273\15\0\11\4\2\0\32\4\3\0"+
    "\1\4\1\0\2\4\3\0\1\4\1\0\6\4\1\272"+
    "\7\4\15\0\7\4\1\274\1\4\2\0\14\4\1\272"+
    "\15\4\3\0\1\4\1\0\2\4\3\0\1\4\1\0"+
    "\13\4\1\273\1\4\1\273\15\0\11\4\2\0\1\4"+
    "\1\275\30\4\3\0\1\4\1\0\2\4\3\0\1\4"+
    "\1\0\16\4\15\0\3\4\1\276\5\4\2\0\32\4"+
    "\3\0\1\4\1\0\2\4\3\0\1\4\1\0\16\4"+
    "\15\0\11\4\2\0\5\4\1\277\24\4\3\0\1\4"+
    "\1\0\2\4\3\0\1\4\1\0\16\4\15\0\11\4"+
    "\2\0\1\300\31\4\3\0\1\4\1\0\2\4\3\0"+
    "\1\4\1\0\16\4\15\0\11\4\2\0\6\4\1\301"+
    "\23\4\3\0\1\4\1\0\2\4\3\0\1\4\1\0"+
    "\3\4\1\302\12\4\15\0\1\4\1\302\4\4\1\303"+
    "\2\4\2\0\1\4\1\303\30\4\3\0\1\4\1\0"+
    "\2\4\3\0\1\4\1\0\5\4\1\304\10\4\15\0"+
    "\1\304\1\4\1\305\6\4\2\0\10\4\1\305\21\4"+
    "\3\0\1\4\1\0\2\4\3\0\1\4\1\0\16\4"+
    "\15\0\11\4\2\0\23\4\1\306\6\4\3\0\1\4"+
    "\1\0\2\4\3\0\1\4\1\0\3\4\1\302\12\4"+
    "\15\0\1\4\1\302\4\4\1\303\2\4\2\0\1\4"+
    "\1\307\30\4\3\0\1\4\1\0\2\4\3\0\1\4"+
    "\1\0\14\4\1\310\1\4\15\0\11\4\2\0\1\310"+
    "\31\4\3\0\1\4\1\0\2\4\3\0\1\4\1\0"+
    "\16\4\15\0\4\4\1\311\4\4\2\0\32\4\3\0"+
    "\1\4\1\0\2\4\3\0\1\4\1\0\14\4\1\265"+
    "\1\4\15\0\10\4\1\312\2\0\1\265\31\4\3\0"+
    "\1\4\1\0\2\4\3\0\1\4\1\0\16\4\15\0"+
    "\11\4\2\0\11\4\1\313\20\4\3\0\1\4\1\0"+
    "\2\4\3\0\1\4\1\0\16\4\15\0\11\4\2\0"+
    "\1\4\1\314\30\4\3\0\1\4\16\0\1\315\112\0"+
    "\1\316\114\0\1\317\113\0\1\320\113\0\1\321\113\0"+
    "\1\322\116\0\1\323\113\0\1\324\73\0\2\4\3\0"+
    "\1\4\1\0\16\4\15\0\11\4\2\0\16\4\1\325"+
    "\10\4\1\325\2\4\3\0\1\4\1\0\2\4\3\0"+
    "\1\4\1\0\1\4\1\326\14\4\15\0\11\4\2\0"+
    "\3\4\1\326\26\4\3\0\1\4\1\0\2\4\3\0"+
    "\1\4\1\0\1\327\15\4\15\0\7\4\1\327\1\4"+
    "\2\0\32\4\3\0\1\4\1\0\2\4\3\0\1\4"+
    "\1\0\10\4\1\330\5\4\15\0\11\4\2\0\5\4"+
    "\1\330\24\4\3\0\1\4\1\0\2\4\3\0\1\4"+
    "\1\0\2\4\1\331\13\4\15\0\11\4\2\0\11\4"+
    "\1\331\20\4\3\0\1\4\1\0\2\4\3\0\1\4"+
    "\1\0\1\4\1\332\14\4\15\0\11\4\2\0\3\4"+
    "\1\332\26\4\3\0\1\4\1\0\2\4\3\0\1\4"+
    "\1\0\12\4\1\333\3\4\15\0\10\4\1\333\2\0"+
    "\32\4\3\0\1\4\1\0\2\4\3\0\1\4\1\0"+
    "\10\4\1\334\5\4\15\0\11\4\2\0\5\4\1\334"+
    "\24\4\3\0\1\4\1\0\2\4\3\0\1\4\1\0"+
    "\16\4\15\0\6\4\1\335\2\4\2\0\1\4\1\335"+
    "\30\4\3\0\1\4\27\105\1\336\113\105\1\121\30\105"+
    "\1\337\14\105\1\337\32\105\1\340\12\105\1\121\77\105"+
    "\1\341\13\105\1\121\77\105\1\342\4\105\1\343\6\105"+
    "\1\121\103\105\1\344\7\105\1\121\113\105\1\121\21\105"+
    "\1\345\71\105\1\121\21\105\1\346\65\105\1\347\1\105"+
    "\1\347\1\105\1\121\113\105\1\121\21\105\1\350\5\105"+
    "\1\350\55\105\1\351\5\105\1\121\113\105\1\121\34\105"+
    "\1\352\12\105\1\352\16\105\1\353\24\105\1\121\77\105"+
    "\1\354\3\105\1\355\7\105\1\121\110\105\1\356\2\105"+
    "\1\121\76\105\1\357\14\105\1\121\37\105\1\357\43\105"+
    "\1\360\7\105\1\121\16\105\1\360\63\105\1\361\10\105"+
    "\1\121\113\105\1\121\34\105\1\362\12\105\1\362\24\105"+
    "\1\363\16\105\1\121\105\105\1\364\5\105\1\121\74\105"+
    "\1\365\16\105\1\121\64\105\27\255\1\257\65\255\1\366"+
    "\11\255\1\366\2\255\1\366\1\255\1\366\3\255\1\366"+
    "\2\255\1\257\14\255\2\366\10\255\1\366\1\255\1\366"+
    "\2\255\1\366\2\255\1\366\3\255\1\366\2\255\1\366"+
    "\6\255\1\366\7\255\1\0\2\4\3\0\1\4\1\0"+
    "\13\4\1\367\2\4\15\0\11\4\2\0\32\4\3\0"+
    "\1\4\1\0\2\4\3\0\1\4\1\0\13\4\1\370"+
    "\1\4\1\370\15\0\11\4\2\0\32\4\3\0\1\4"+
    "\1\0\2\4\3\0\1\4\1\0\6\4\1\371\7\4"+
    "\15\0\11\4\2\0\14\4\1\371\15\4\3\0\1\4"+
    "\1\0\2\4\3\0\1\4\1\0\12\4\1\372\3\4"+
    "\15\0\10\4\1\372\2\0\32\4\3\0\1\4\1\0"+
    "\2\4\3\0\1\4\1\0\16\4\15\0\11\4\2\0"+
    "\13\4\1\373\14\4\1\373\1\4\3\0\1\4\1\0"+
    "\2\4\3\0\1\4\1\0\16\4\15\0\11\4\2\0"+
    "\5\4\1\374\24\4\3\0\1\4\1\0\2\4\3\0"+
    "\1\4\1\0\1\375\15\4\15\0\7\4\1\375\1\4"+
    "\2\0\32\4\3\0\1\4\1\0\2\4\3\0\1\4"+
    "\1\0\14\4\1\376\1\4\15\0\11\4\2\0\1\376"+
    "\31\4\3\0\1\4\1\0\2\4\3\0\1\4\1\0"+
    "\16\4\15\0\11\4\2\0\2\4\1\377\14\4\1\377"+
    "\12\4\3\0\1\4\1\0\2\4\3\0\1\4\1\0"+
    "\10\4\1\u0100\5\4\15\0\11\4\2\0\5\4\1\u0100"+
    "\24\4\3\0\1\4\1\0\2\4\3\0\1\4\1\0"+
    "\1\4\1\u0101\14\4\15\0\11\4\2\0\3\4\1\u0101"+
    "\26\4\3\0\1\4\1\0\2\4\3\0\1\4\1\0"+
    "\16\4\15\0\11\4\2\0\6\4\1\u0102\23\4\3\0"+
    "\1\4\1\0\2\4\3\0\1\4\1\0\16\4\15\0"+
    "\11\4\2\0\5\4\1\u0103\24\4\3\0\1\4\1\0"+
    "\2\4\3\0\1\4\1\0\13\4\1\u0104\2\4\15\0"+
    "\11\4\2\0\32\4\3\0\1\4\1\0\2\4\3\0"+
    "\1\4\1\0\16\4\15\0\11\4\2\0\5\4\1\u0105"+
    "\24\4\3\0\1\4\1\0\2\4\3\0\1\4\1\0"+
    "\16\4\15\0\6\4\1\u0106\2\4\2\0\1\4\1\u0106"+
    "\30\4\3\0\1\4\1\0\2\4\3\0\1\4\1\0"+
    "\11\4\1\u0107\4\4\15\0\4\4\1\u0107\4\4\2\0"+
    "\32\4\3\0\1\4\1\0\2\4\3\0\1\4\1\0"+
    "\10\4\1\u0108\5\4\15\0\11\4\2\0\5\4\1\u0108"+
    "\24\4\3\0\1\4\1\0\2\4\3\0\1\4\1\0"+
    "\11\4\1\u0107\4\4\15\0\4\4\1\u0109\4\4\2\0"+
    "\32\4\3\0\1\4\1\0\2\4\3\0\1\4\1\0"+
    "\1\4\1\u010a\14\4\15\0\11\4\2\0\3\4\1\u010a"+
    "\26\4\3\0\1\4\1\0\2\4\3\0\1\4\1\0"+
    "\16\4\15\0\7\4\1\u010b\1\4\2\0\32\4\3\0"+
    "\1\4\1\0\2\4\3\0\1\4\1\0\16\4\15\0"+
    "\7\4\1\u010c\1\4\2\0\32\4\3\0\1\4\1\0"+
    "\2\4\3\0\1\4\1\0\16\4\15\0\4\4\1\u010d"+
    "\4\4\2\0\32\4\3\0\1\4\17\0\1\u010e\113\0"+
    "\1\u010f\113\0\1\u0110\113\0\1\u0111\113\0\1\u0112\104\0"+
    "\1\u0113\113\0\1\u0114\104\0\2\4\3\0\1\4\1\0"+
    "\10\4\1\u0115\5\4\15\0\11\4\2\0\5\4\1\u0115"+
    "\24\4\3\0\1\4\1\0\2\4\3\0\1\4\1\0"+
    "\13\4\1\u0116\1\4\1\u0116\15\0\11\4\2\0\32\4"+
    "\3\0\1\4\1\0\2\4\3\0\1\4\1\0\10\4"+
    "\1\u0117\5\4\15\0\11\4\2\0\5\4\1\u0117\24\4"+
    "\3\0\1\4\1\0\2\4\3\0\1\4\1\0\16\4"+
    "\15\0\6\4\1\u0118\2\4\2\0\1\4\1\u0118\30\4"+
    "\3\0\1\4\11\105\1\u0119\15\105\1\121\31\105\1\u0119"+
    "\52\105\1\u011a\6\105\1\121\74\105\1\u011b\16\105\1\121"+
    "\113\105\1\121\56\105\1\u011c\25\105\1\u011d\6\105\1\121"+
    "\77\105\1\u011e\13\105\1\121\106\105\1\u011f\4\105\1\121"+
    "\101\105\1\u0120\11\105\1\121\75\105\1\u0121\15\105\1\121"+
    "\31\105\1\u0121\50\105\1\u0122\10\105\1\121\42\105\1\u0122"+
    "\23\105\1\u0123\24\105\1\121\102\105\1\u0124\10\105\1\121"+
    "\42\105\1\u0124\50\105\1\121\56\105\1\u0125\23\105\1\u0126"+
    "\10\105\1\121\104\105\1\u0127\6\105\1\121\113\105\1\u0128"+
    "\113\105\1\121\20\105\1\u0129\11\105\1\u0129\44\105\1\u012a"+
    "\13\105\1\121\14\105\1\u012a\76\105\1\121\20\105\1\u012b"+
    "\54\105\1\u012c\15\105\1\121\31\105\1\u012c\34\105\1\u012d"+
    "\24\105\1\121\75\105\1\u012e\15\105\1\121\74\105\1\u012f"+
    "\16\105\1\121\64\105\1\255\1\u0130\11\255\1\u0130\2\255"+
    "\1\u0130\1\255\1\u0130\3\255\1\u0130\2\255\1\257\14\255"+
    "\2\u0130\10\255\1\u0130\1\255\1\u0130\2\255\1\u0130\2\255"+
    "\1\u0130\3\255\1\u0130\2\255\1\u0130\6\255\1\u0130\7\255"+
    "\1\0\2\4\3\0\1\4\1\0\16\4\15\0\11\4"+
    "\2\0\3\4\1\u0131\26\4\3\0\1\4\1\0\2\4"+
    "\3\0\1\4\1\0\16\4\15\0\11\4\2\0\16\4"+
    "\1\u0132\10\4\1\u0132\2\4\3\0\1\4\1\0\2\4"+
    "\3\0\1\4\1\0\16\4\15\0\11\4\2\0\16\4"+
    "\1\u0133\10\4\1\u0133\2\4\3\0\1\4\1\0\2\4"+
    "\3\0\1\4\1\0\1\u0134\15\4\15\0\7\4\1\u0134"+
    "\1\4\2\0\32\4\3\0\1\4\1\0\2\4\3\0"+
    "\1\4\1\0\16\4\15\0\11\4\2\0\11\4\1\u0135"+
    "\20\4\3\0\1\4\1\0\2\4\3\0\1\4\1\0"+
    "\16\4\15\0\11\4\2\0\5\4\1\u0136\24\4\3\0"+
    "\1\4\1\0\2\4\3\0\1\4\1\0\1\4\1\u0137"+
    "\14\4\15\0\11\4\2\0\3\4\1\u0137\26\4\3\0"+
    "\1\4\1\0\2\4\3\0\1\4\1\0\16\4\15\0"+
    "\11\4\2\0\16\4\1\u0138\10\4\1\u0138\2\4\3\0"+
    "\1\4\1\0\2\4\3\0\1\4\1\0\13\4\1\u0139"+
    "\2\4\15\0\11\4\2\0\16\4\1\u0138\10\4\1\u0138"+
    "\2\4\3\0\1\4\1\0\2\4\3\0\1\4\1\0"+
    "\16\4\15\0\5\4\1\u013a\3\4\2\0\4\4\1\u013a"+
    "\25\4\3\0\1\4\1\0\2\4\3\0\1\4\1\0"+
    "\16\4\15\0\11\4\2\0\5\4\1\u013b\24\4\3\0"+
    "\1\4\1\0\2\4\3\0\1\4\1\0\16\4\15\0"+
    "\11\4\2\0\5\4\1\u013c\24\4\3\0\1\4\1\0"+
    "\2\4\3\0\1\4\1\0\13\4\1\u013d\2\4\15\0"+
    "\11\4\2\0\32\4\3\0\1\4\11\0\1\u013e\113\0"+
    "\1\u013f\113\0\1\u0140\113\0\1\u0141\113\0\1\u0142\126\0"+
    "\1\u0143\113\0\1\u0144\70\0\2\4\3\0\1\4\1\0"+
    "\16\4\15\0\6\4\1\u0145\2\4\2\0\1\4\1\u0145"+
    "\30\4\3\0\1\4\27\105\1\u0146\113\105\1\u0147\113\105"+
    "\1\u0148\113\105\1\u0149\111\105\1\u014a\1\105\1\121\113\105"+
    "\1\u014b\106\105\1\u014c\4\105\1\121\74\105\1\u014d\16\105"+
    "\1\121\104\105\1\u014e\6\105\1\121\33\105\1\u014e\40\105"+
    "\1\u014f\16\105\1\121\22\105\1\u014f\61\105\1\u0150\6\105"+
    "\1\121\113\105\1\u0151\113\105\1\u0152\113\105\1\121\55\105"+
    "\1\u0153\35\105\1\u0154\75\105\1\u0155\15\105\1\121\31\105"+
    "\1\u0155\61\105\1\121\21\105\1\u0156\5\105\1\u0156\63\105"+
    "\1\121\47\105\1\u0157\35\105\1\u0158\5\105\1\121\17\105"+
    "\1\u0158\64\105\1\u0159\6\105\1\121\104\105\1\u015a\6\105"+
    "\1\121\106\105\1\u015b\4\105\1\121\64\105\1\255\1\u015c"+
    "\11\255\1\u015c\2\255\1\u015c\1\255\1\u015c\3\255\1\u015c"+
    "\2\255\1\257\14\255\2\u015c\10\255\1\u015c\1\255\1\u015c"+
    "\2\255\1\u015c\2\255\1\u015c\3\255\1\u015c\2\255\1\u015c"+
    "\6\255\1\u015c\7\255\1\0\2\4\3\0\1\4\1\0"+
    "\16\4\15\0\11\4\2\0\24\4\1\u015d\4\4\1\u015d"+
    "\3\0\1\4\1\0\2\4\3\0\1\4\1\0\12\4"+
    "\1\u015e\3\4\15\0\10\4\1\u015e\2\0\32\4\3\0"+
    "\1\4\1\0\2\4\3\0\1\4\1\0\16\4\15\0"+
    "\11\4\2\0\5\4\1\u015f\24\4\3\0\1\4\1\0"+
    "\2\4\3\0\1\4\1\0\10\4\1\u0160\5\4\15\0"+
    "\11\4\2\0\5\4\1\u0160\24\4\3\0\1\4\1\0"+
    "\2\4\3\0\1\4\1\0\16\4\15\0\11\4\2\0"+
    "\11\4\1\u0161\20\4\3\0\1\4\1\0\2\4\3\0"+
    "\1\4\1\0\16\4\15\0\1\4\1\u0162\7\4\2\0"+
    "\32\4\3\0\1\4\20\0\1\u0163\113\0\1\u0164\113\0"+
    "\1\u0165\113\0\1\u0166\113\0\1\u0167\113\0\1\u0168\113\0"+
    "\1\u0169\73\0\27\105\1\u016a\111\105\1\u016b\1\105\1\121"+
    "\104\105\1\u016c\6\105\1\121\113\105\1\121\21\105\1\u016d"+
    "\5\105\1\u016d\54\105\1\u016e\6\105\1\121\33\105\1\u016e"+
    "\57\105\1\u016f\113\105\1\u0170\113\105\1\u0171\104\105\1\u0172"+
    "\6\105\1\121\33\105\1\u0172\51\105\1\u0173\5\105\1\121"+
    "\113\105\1\121\30\105\1\u0174\14\105\1\u0174\45\105\1\121"+
    "\21\105\1\u0175\71\105\1\u0176\113\105\1\121\50\105\1\u0177"+
    "\13\105\1\255\1\u0178\11\255\1\u0178\2\255\1\u0178\1\255"+
    "\1\u0178\3\255\1\u0178\2\255\1\257\14\255\2\u0178\10\255"+
    "\1\u0178\1\255\1\u0178\2\255\1\u0178\2\255\1\u0178\3\255"+
    "\1\u0178\2\255\1\u0178\6\255\1\u0178\7\255\1\0\2\4"+
    "\3\0\1\4\1\0\7\4\1\u0179\6\4\15\0\3\4"+
    "\1\u0179\5\4\2\0\32\4\3\0\1\4\1\0\2\4"+
    "\3\0\1\4\1\0\16\4\15\0\6\4\1\u017a\2\4"+
    "\2\0\1\4\1\u017a\30\4\3\0\1\4\1\0\2\4"+
    "\3\0\1\4\1\0\16\4\15\0\11\4\2\0\1\4"+
    "\1\u017b\30\4\3\0\1\4\1\0\2\4\3\0\1\4"+
    "\1\0\13\4\1\u017c\2\4\15\0\11\4\2\0\32\4"+
    "\3\0\1\4\27\105\1\u017d\113\105\1\u017e\113\105\1\u017f"+
    "\113\105\1\u0180\113\105\1\u0181\77\105\1\u0182\13\105\1\121"+
    "\105\105\1\u0183\5\105\1\121\17\105\1\u0183\73\105\1\u0184"+
    "\113\105\1\u0185\64\105\1\255\1\u0186\11\255\1\u0186\2\255"+
    "\1\u0186\1\255\1\u0186\3\255\1\u0186\2\255\1\257\14\255"+
    "\2\u0186\10\255\1\u0186\1\255\1\u0186\2\255\1\u0186\2\255"+
    "\1\u0186\3\255\1\u0186\2\255\1\u0186\6\255\1\u0186\7\255"+
    "\1\0\2\4\3\0\1\4\1\0\12\4\1\u0187\3\4"+
    "\15\0\10\4\1\u0187\2\0\32\4\3\0\1\4\27\105"+
    "\1\u0188\104\105\1\u0189\6\105\1\121\33\105\1\u0189\30\105"+
    "\27\255\1\u018a\64\255\1\0\2\4\3\0\1\4\1\0"+
    "\1\4\1\u018b\14\4\15\0\11\4\2\0\3\4\1\u018b"+
    "\26\4\3\0\1\4\24\105\1\u018c\2\105\1\121\26\105"+
    "\1\u018c\35\105\1\0\2\4\3\0\1\4\1\0\10\4"+
    "\1\u018d\5\4\15\0\11\4\2\0\5\4\1\u018d\24\4"+
    "\3\0\1\4\27\105\1\u018e\64\105";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22496];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\13\1\1\11\2\1\12\11"+
    "\22\1\11\0\13\1\14\0\1\11\15\0\1\11\14\1"+
    "\3\11\22\1\2\11\10\0\11\1\1\11\5\0\1\11"+
    "\20\0\1\11\3\0\1\11\35\1\1\0\1\11\6\0"+
    "\11\1\1\11\30\0\27\1\7\0\4\1\17\0\1\11"+
    "\10\0\15\1\7\0\1\1\4\11\1\0\1\11\5\0"+
    "\2\11\1\0\1\11\10\0\6\1\10\11\4\0\3\11"+
    "\4\0\1\11\2\0\4\1\5\11\2\0\2\11\1\0"+
    "\1\1\1\11\1\0\1\11\1\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[398];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

public String extraerInfo (String token){
    int longitud = token.length();
    String tokenSinCorchetes = token.substring(1, longitud-1);
    System.out.println("El token a enviar es: "+tokenSinCorchetes);
    return tokenSinCorchetes;
}

public String extraerInfo2 (String token){
    int longitud = token.length();
    String tokenSinCorchetes = token.substring(2, longitud-1);
    System.out.println("El token a enviar es: "+tokenSinCorchetes);
    return tokenSinCorchetes;
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Segundo_Analizador_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos2.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Se reconocio el error lexico: "+yytext()+"."); return new Symbol(Simbolos2.ErrorLexico, yycolumn, yyline, yytext());
            } 
            // fall through
          case 116: break;
          case 2: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Numero"); return new Symbol(Simbolos2.Numero, yycolumn, yyline, yytext());
            } 
            // fall through
          case 117: break;
          case 3: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Variable"); return new Symbol(Simbolos2.Variable, yycolumn, yyline, yytext());
            } 
            // fall through
          case 118: break;
          case 4: 
            { /*Se Ingnora*/
            } 
            // fall through
          case 119: break;
          case 5: 
            { /*Se ignora*/
            } 
            // fall through
          case 120: break;
          case 6: 
            { System.out.println("Se reconocio "+yytext()+" de tipo A de ENLACE"); return new Symbol(Simbolos2.Aenlace, yycolumn, yyline, yytext());
            } 
            // fall through
          case 121: break;
          case 7: 
            { System.out.println("Se reconocio "+yytext()+" de tipo PARRAFO"); return new Symbol(Simbolos2.p, yycolumn, yyline, yytext());
            } 
            // fall through
          case 122: break;
          case 8: 
            { System.out.println("Se reconocio "+yytext()+" de tipo SUBRAYADO"); return new Symbol(Simbolos2.u, yycolumn, yyline, yytext());
            } 
            // fall through
          case 123: break;
          case 9: 
            { System.out.println("Se reconocio "+yytext()+" de tipo ITALICA"); return new Symbol(Simbolos2.i, yycolumn, yyline, yytext());
            } 
            // fall through
          case 124: break;
          case 10: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Abrir Corchetes"); return new Symbol(Simbolos2.AbrirCorchetes, yycolumn, yyline, yytext());
            } 
            // fall through
          case 125: break;
          case 11: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Comillas"); return new Symbol(Simbolos2.Comillas, yycolumn, yyline, yytext());
            } 
            // fall through
          case 126: break;
          case 12: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Dos Puntos"); return new Symbol(Simbolos2.DosPuntos, yycolumn, yyline, yytext());
            } 
            // fall through
          case 127: break;
          case 13: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Punto y Coma"); return new Symbol(Simbolos2.PuntoYComa, yycolumn, yyline, yytext());
            } 
            // fall through
          case 128: break;
          case 14: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Cerrar Corchetes"); return new Symbol(Simbolos2.CerrarCorchetes, yycolumn, yyline, yytext());
            } 
            // fall through
          case 129: break;
          case 15: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Abrir Parentesis"); return new Symbol(Simbolos2.AbrirParentesis, yycolumn, yyline, yytext());
            } 
            // fall through
          case 130: break;
          case 16: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Cerrar Parentesis"); return new Symbol(Simbolos2.CerrarParentesis, yycolumn, yyline, yytext());
            } 
            // fall through
          case 131: break;
          case 17: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Coma"); return new Symbol(Simbolos2.Coma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 132: break;
          case 18: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Igual"); return new Symbol(Simbolos2.Igual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 133: break;
          case 19: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Suma"); return new Symbol(Simbolos2.Mas, yycolumn, yyline, yytext());
            } 
            // fall through
          case 134: break;
          case 20: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Resta"); return new Symbol(Simbolos2.Menos, yycolumn, yyline, yytext());
            } 
            // fall through
          case 135: break;
          case 21: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Division"); return new Symbol(Simbolos2.Diagonal, yycolumn, yyline, yytext());
            } 
            // fall through
          case 136: break;
          case 22: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Multiplicacion"); return new Symbol(Simbolos2.Asterisco, yycolumn, yyline, yytext());
            } 
            // fall through
          case 137: break;
          case 23: 
            { System.out.println("Se reconocio "+yytext()+" de tipo NEGRILLA"); return new Symbol(Simbolos2.b, yycolumn, yyline, yytext());
            } 
            // fall through
          case 138: break;
          case 24: 
            { System.out.println("Se reconocio "+yytext()+" de tipo MAYOR QUE"); return new Symbol(Simbolos2.MayorQue, yycolumn, yyline, yytext());
            } 
            // fall through
          case 139: break;
          case 25: 
            { System.out.println("Se reconocio "+yytext()+" de tipo MENOR QUE"); return new Symbol(Simbolos2.MenorQue, yycolumn, yyline, yytext());
            } 
            // fall through
          case 140: break;
          case 26: 
            { System.out.println("Se reconocio "+yytext()+" de tipo ITEM DE LISTA"); return new Symbol(Simbolos2.li, yycolumn, yyline, yytext());
            } 
            // fall through
          case 141: break;
          case 27: 
            { System.out.println("Se reconocio "+yytext()+" de tipo LISTA DESORDENADA"); return new Symbol(Simbolos2.ul, yycolumn, yyline, yytext());
            } 
            // fall through
          case 142: break;
          case 28: 
            { System.out.println("Se reconocio "+yytext()+" de tipo LISTA ORDENADA"); return new Symbol(Simbolos2.ol, yycolumn, yyline, yytext());
            } 
            // fall through
          case 143: break;
          case 29: 
            { System.out.println("Se reconocio "+yytext()+" de tipo TEXTO ENTRE COMILLAS"); return new Symbol(Simbolos2.TextoEComillas, yycolumn, yyline, extraerInfo(yytext()));
            } 
            // fall through
          case 144: break;
          case 30: 
            { System.out.println("Se reconocio "+yytext()+" de tipo ASIGNACION"); return new Symbol(Simbolos2.Asignacion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 145: break;
          case 31: 
            { System.out.println("Se reconocio "+yytext()+" de tipo SALTO DE LINEA"); return new Symbol(Simbolos2.br, yycolumn, yyline, yytext());
            } 
            // fall through
          case 146: break;
          case 32: 
            { System.out.println("Se reconocio "+yytext()+" de tipo IF"); return new Symbol(Simbolos2.iff, yycolumn, yyline, yytext());
            } 
            // fall through
          case 147: break;
          case 33: 
            { System.out.println("Se reconocio "+yytext()+" de tipo LINEA HORIZONTAL"); return new Symbol(Simbolos2.hr, yycolumn, yyline, yytext());
            } 
            // fall through
          case 148: break;
          case 34: 
            { System.out.println("Se reconocio "+yytext()+" de tipo OR"); return new Symbol(Simbolos2.orr, yycolumn, yyline, yytext());
            } 
            // fall through
          case 149: break;
          case 35: 
            { System.out.println("Se reconocio "+yytext()+" de tipo MAYOR O IGUAL"); return new Symbol(Simbolos2.MayorIgual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 150: break;
          case 36: 
            { System.out.println("Se reconocio "+yytext()+" de tipo MENOR O IGUAL"); return new Symbol(Simbolos2.MenorIgual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 151: break;
          case 37: 
            { System.out.println("Se reconocio "+yytext()+" de tipo DIFERENTE DE"); return new Symbol(Simbolos2.DiferenteDe, yycolumn, yyline, yytext());
            } 
            // fall through
          case 152: break;
          case 38: 
            { System.out.println("Se reconocio "+yytext()+" de tipo TO"); return new Symbol(Simbolos2.too, yycolumn, yyline, yytext());
            } 
            // fall through
          case 153: break;
          case 39: 
            { System.out.println("Se reconocio "+yytext()+" de tipo TEXTO MENOR QUE"); return new Symbol(Simbolos2.SEMenorQue, yycolumn, yyline, yytext());
            } 
            // fall through
          case 154: break;
          case 40: 
            { System.out.println("Se reconocio "+yytext()+" de tipo TEXTO MAYOR QUE"); return new Symbol(Simbolos2.SEMayorQue, yycolumn, yyline, yytext());
            } 
            // fall through
          case 155: break;
          case 41: 
            { System.out.println("Se reconocio "+yytext()+" de tipo VALOR ENTERO"); return new Symbol(Simbolos2.valorEntero, yycolumn, yyline, extraerInfo(yytext()));
            } 
            // fall through
          case 156: break;
          case 42: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Lista con letras"); return new Symbol(Simbolos2.A, yycolumn, yyline, extraerInfo(yytext()));
            } 
            // fall through
          case 157: break;
          case 43: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Lista Numerada"); return new Symbol(Simbolos2.num1, yycolumn, yyline, extraerInfo(yytext()));
            } 
            // fall through
          case 158: break;
          case 44: 
            { System.out.println("Se reconocio "+yytext()+" de tipo TEXTO TIPO LINK"); return new Symbol(Simbolos2.TextoTLink, yycolumn, yyline, extraerInfo2(yytext()));
            } 
            // fall through
          case 159: break;
          case 45: 
            { System.out.println("Se reconocio "+yytext()+" de tipo AND"); return new Symbol(Simbolos2.andd, yycolumn, yyline, yytext());
            } 
            // fall through
          case 160: break;
          case 46: 
            { System.out.println("Se reconocio "+yytext()+" de tipo FOR"); return new Symbol(Simbolos2.forr, yycolumn, yyline, yytext());
            } 
            // fall through
          case 161: break;
          case 47: 
            { System.out.println("Se reconocio "+yytext()+" de tipo END"); return new Symbol(Simbolos2.end, yycolumn, yyline, yytext());
            } 
            // fall through
          case 162: break;
          case 48: 
            { System.out.println("Se reconocio "+yytext()+" de tipo SUPERINDICE"); return new Symbol(Simbolos2.sup, yycolumn, yyline, yytext());
            } 
            // fall through
          case 163: break;
          case 49: 
            { System.out.println("Se reconocio "+yytext()+" de tipo SUBINDICE"); return new Symbol(Simbolos2.sub, yycolumn, yyline, yytext());
            } 
            // fall through
          case 164: break;
          case 50: 
            { System.out.println("Se reconocio "+yytext()+" de tipo VAR"); return new Symbol(Simbolos2.var, yycolumn, yyline, yytext());
            } 
            // fall through
          case 165: break;
          case 51: 
            { System.out.println("Se reconocio "+yytext()+" de tipo TEXTO AMPERSAND &"); return new Symbol(Simbolos2.SEAmpersand, yycolumn, yyline, yytext());
            } 
            // fall through
          case 166: break;
          case 52: 
            { System.out.println("Se reconocio "+yytext()+" de tipo LINK"); return new Symbol(Simbolos2.link, yycolumn, yyline, yytext());
            } 
            // fall through
          case 167: break;
          case 53: 
            { System.out.println("Se reconocio "+yytext()+" de tipo TEXT"); return new Symbol(Simbolos2.text, yycolumn, yyline, yytext());
            } 
            // fall through
          case 168: break;
          case 54: 
            { System.out.println("Se reconocio "+yytext()+" de tipo TYPE"); return new Symbol(Simbolos2.type, yycolumn, yyline, yytext());
            } 
            // fall through
          case 169: break;
          case 55: 
            { System.out.println("Se reconocio "+yytext()+" de tipo NAME"); return new Symbol(Simbolos2.name, yycolumn, yyline, yytext());
            } 
            // fall through
          case 170: break;
          case 56: 
            { System.out.println("Se reconocio "+yytext()+" de tipo SIN SALTO DE LINEA"); return new Symbol(Simbolos2.nobr, yycolumn, yyline, yytext());
            } 
            // fall through
          case 171: break;
          case 57: 
            { System.out.println("Se reconocio "+yytext()+" de tipo PORCENTAJE"); return new Symbol(Simbolos2.Porcentaje, yycolumn, yyline, extraerInfo(yytext()));
            } 
            // fall through
          case 172: break;
          case 58: 
            { System.out.println("Se reconocio "+yytext()+" de tipo BODY"); return new Symbol(Simbolos2.body, yycolumn, yyline, yytext());
            } 
            // fall through
          case 173: break;
          case 59: 
            { System.out.println("Se reconocio "+yytext()+" de tipo HTML"); return new Symbol(Simbolos2.html, yycolumn, yyline, yytext());
            } 
            // fall through
          case 174: break;
          case 60: 
            { System.out.println("Se reconocio "+yytext()+" de tipo HEAD"); return new Symbol(Simbolos2.head, yycolumn, yyline, yytext());
            } 
            // fall through
          case 175: break;
          case 61: 
            { System.out.println("Se reconocio "+yytext()+" de tipo HREF"); return new Symbol(Simbolos2.href, yycolumn, yyline, yytext());
            } 
            // fall through
          case 176: break;
          case 62: 
            { System.out.println("Se reconocio "+yytext()+" de tipo FACE"); return new Symbol(Simbolos2.face, yycolumn, yyline, yytext());
            } 
            // fall through
          case 177: break;
          case 63: 
            { System.out.println("Se reconocio "+yytext()+" de tipo FONT"); return new Symbol(Simbolos2.font, yycolumn, yyline, yytext());
            } 
            // fall through
          case 178: break;
          case 64: 
            { System.out.println("Se reconocio "+yytext()+" de tipo TRUE"); return new Symbol(Simbolos2.truee, yycolumn, yyline, yytext());
            } 
            // fall through
          case 179: break;
          case 65: 
            { System.out.println("Se reconocio "+yytext()+" de tipo THEN"); return new Symbol(Simbolos2.thenn, yycolumn, yyline, yytext());
            } 
            // fall through
          case 180: break;
          case 66: 
            { System.out.println("Se reconocio "+yytext()+" de tipo ELSE"); return new Symbol(Simbolos2.elsee, yycolumn, yyline, yytext());
            } 
            // fall through
          case 181: break;
          case 67: 
            { System.out.println("Se reconocio "+yytext()+" de tipo SIZE"); return new Symbol(Simbolos2.size, yycolumn, yyline, yytext());
            } 
            // fall through
          case 182: break;
          case 68: 
            { System.out.println("Se reconocio "+yytext()+" de tipo TITLE"); return new Symbol(Simbolos2.title, yycolumn, yyline, yytext());
            } 
            // fall through
          case 183: break;
          case 69: 
            { System.out.println("Se reconocio "+yytext()+" de tipo ALIGN"); return new Symbol(Simbolos2.align, yycolumn, yyline, yytext());
            } 
            // fall through
          case 184: break;
          case 70: 
            { System.out.println("Se reconocio "+yytext()+" de tipo COLOR"); return new Symbol(Simbolos2.color, yycolumn, yyline, yytext());
            } 
            // fall through
          case 185: break;
          case 71: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Color RED"); return new Symbol(Simbolos2.red, yycolumn, yyline, extraerInfo(yytext()));
            } 
            // fall through
          case 186: break;
          case 72: 
            { System.out.println("Se reconocio "+yytext()+" de tipo PRINT"); return new Symbol(Simbolos2.printt, yycolumn, yyline, yytext());
            } 
            // fall through
          case 187: break;
          case 73: 
            { System.out.println("Se reconocio "+yytext()+" de tipo PARPADEANTE"); return new Symbol(Simbolos2.blink, yycolumn, yyline, yytext());
            } 
            // fall through
          case 188: break;
          case 74: 
            { System.out.println("Se reconocio "+yytext()+" de tipo FALSE"); return new Symbol(Simbolos2.falsee, yycolumn, yyline, yytext());
            } 
            // fall through
          case 189: break;
          case 75: 
            { System.out.println("Se reconocio "+yytext()+" de tipo START"); return new Symbol(Simbolos2.startt, yycolumn, yyline, yytext());
            } 
            // fall through
          case 190: break;
          case 76: 
            { System.out.println("Se reconocio "+yytext()+" de tipo WIDTH"); return new Symbol(Simbolos2.width, yycolumn, yyline, yytext());
            } 
            // fall through
          case 191: break;
          case 77: 
            { System.out.println("Se reconocio "+yytext()+" de tipo WHILE"); return new Symbol(Simbolos2.whilee, yycolumn, yyline, yytext());
            } 
            // fall through
          case 192: break;
          case 78: 
            { System.out.println("Se reconocio "+yytext()+" de tipo BEGIN"); return new Symbol(Simbolos2.begin, yycolumn, yyline, yytext());
            } 
            // fall through
          case 193: break;
          case 79: 
            { System.out.println("Se reconocio "+yytext()+" de tipo CENTER"); return new Symbol(Simbolos2.center, yycolumn, yyline, yytext());
            } 
            // fall through
          case 194: break;
          case 80: 
            { System.out.println("Se reconocio "+yytext()+" de tipo LEFT"); return new Symbol(Simbolos2.leftC, yycolumn, yyline, extraerInfo(yytext()));
            } 
            // fall through
          case 195: break;
          case 81: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Color LIME"); return new Symbol(Simbolos2.lime, yycolumn, yyline, extraerInfo(yytext()));
            } 
            // fall through
          case 196: break;
          case 82: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Color TEAL"); return new Symbol(Simbolos2.teal, yycolumn, yyline, extraerInfo(yytext()));
            } 
            // fall through
          case 197: break;
          case 83: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Color GRAY"); return new Symbol(Simbolos2.gray, yycolumn, yyline, extraerInfo(yytext()));
            } 
            // fall through
          case 198: break;
          case 84: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Color AQUA"); return new Symbol(Simbolos2.aqua, yycolumn, yyline, extraerInfo(yytext()));
            } 
            // fall through
          case 199: break;
          case 85: 
            { System.out.println("Se reconocio "+yytext()+" de tipo DISC"); return new Symbol(Simbolos2.disc, yycolumn, yyline, extraerInfo(yytext()));
            } 
            // fall through
          case 200: break;
          case 86: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Color NAVY"); return new Symbol(Simbolos2.navy, yycolumn, yyline, extraerInfo(yytext()));
            } 
            // fall through
          case 201: break;
          case 87: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Color BLUE"); return new Symbol(Simbolos2.blue, yycolumn, yyline, extraerInfo(yytext()));
            } 
            // fall through
          case 202: break;
          case 88: 
            { System.out.println("Se reconocio "+yytext()+" de tipo TACHADO"); return new Symbol(Simbolos2.strike, yycolumn, yyline, yytext());
            } 
            // fall through
          case 203: break;
          case 89: 
            { System.out.println("Se reconocio "+yytext()+" de tipo STRING"); return new Symbol(Simbolos2.stringg, yycolumn, yyline, yytext());
            } 
            // fall through
          case 204: break;
          case 90: 
            { System.out.println("Se reconocio "+yytext()+" de tipo a con TILDE"); return new Symbol(Simbolos2.SEa, yycolumn, yyline, yytext());
            } 
            // fall through
          case 205: break;
          case 91: 
            { System.out.println("Se reconocio "+yytext()+" de tipo u con TILDE"); return new Symbol(Simbolos2.SEu, yycolumn, yyline, yytext());
            } 
            // fall through
          case 206: break;
          case 92: 
            { System.out.println("Se reconocio "+yytext()+" de tipo e con TILDE"); return new Symbol(Simbolos2.SEe, yycolumn, yyline, yytext());
            } 
            // fall through
          case 207: break;
          case 93: 
            { System.out.println("Se reconocio "+yytext()+" de tipo i con TILDE"); return new Symbol(Simbolos2.SEi, yycolumn, yyline, yytext());
            } 
            // fall through
          case 208: break;
          case 94: 
            { System.out.println("Se reconocio "+yytext()+" de tipo o con TILDE"); return new Symbol(Simbolos2.SEo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 209: break;
          case 95: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Ñ dentro de TEXTO"); return new Symbol(Simbolos2.SEN, yycolumn, yyline, yytext());
            } 
            // fall through
          case 210: break;
          case 96: 
            { System.out.println("Se reconocio "+yytext()+" de tipo ñ dentro de TEXTO"); return new Symbol(Simbolos2.SEn, yycolumn, yyline, yytext());
            } 
            // fall through
          case 211: break;
          case 97: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Color GREEN"); return new Symbol(Simbolos2.green, yycolumn, yyline, extraerInfo(yytext()));
            } 
            // fall through
          case 212: break;
          case 98: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Color OLIVE"); return new Symbol(Simbolos2.olive, yycolumn, yyline, extraerInfo(yytext()));
            } 
            // fall through
          case 213: break;
          case 99: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Color BLACK"); return new Symbol(Simbolos2.black, yycolumn, yyline, extraerInfo(yytext()));
            } 
            // fall through
          case 214: break;
          case 100: 
            { System.out.println("Se reconocio "+yytext()+" de tipo RIGHT"); return new Symbol(Simbolos2.rightC, yycolumn, yyline, extraerInfo(yytext()));
            } 
            // fall through
          case 215: break;
          case 101: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Color WHITE"); return new Symbol(Simbolos2.white, yycolumn, yyline, extraerInfo(yytext()));
            } 
            // fall through
          case 216: break;
          case 102: 
            { System.out.println("Se reconocio "+yytext()+" de tipo BGCOLOR"); return new Symbol(Simbolos2.bgcolor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 217: break;
          case 103: 
            { System.out.println("Se reconocio "+yytext()+" de tipo INTEGER"); return new Symbol(Simbolos2.integerr, yycolumn, yyline, yytext());
            } 
            // fall through
          case 218: break;
          case 104: 
            { System.out.println("Se reconocio "+yytext()+" de tipo BOOLEAN"); return new Symbol(Simbolos2.booleann, yycolumn, yyline, yytext());
            } 
            // fall through
          case 219: break;
          case 105: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Color MAROON"); return new Symbol(Simbolos2.maroon, yycolumn, yyline, extraerInfo(yytext()));
            } 
            // fall through
          case 220: break;
          case 106: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Color PURPLE"); return new Symbol(Simbolos2.purple, yycolumn, yyline, extraerInfo(yytext()));
            } 
            // fall through
          case 221: break;
          case 107: 
            { System.out.println("Se reconocio "+yytext()+" de tipo CENTER en comillas"); return new Symbol(Simbolos2.centerC, yycolumn, yyline, extraerInfo(yytext()));
            } 
            // fall through
          case 222: break;
          case 108: 
            { System.out.println("Se reconocio "+yytext()+" de tipo CIRCLE"); return new Symbol(Simbolos2.circle, yycolumn, yyline, extraerInfo(yytext()));
            } 
            // fall through
          case 223: break;
          case 109: 
            { System.out.println("Se reconocio "+yytext()+" de tipo SQUARE"); return new Symbol(Simbolos2.square, yycolumn, yyline, extraerInfo(yytext()));
            } 
            // fall through
          case 224: break;
          case 110: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Color SILVER"); return new Symbol(Simbolos2.silver, yycolumn, yyline, extraerInfo(yytext()));
            } 
            // fall through
          case 225: break;
          case 111: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Color YELLOW"); return new Symbol(Simbolos2.yellow, yycolumn, yyline, extraerInfo(yytext()));
            } 
            // fall through
          case 226: break;
          case 112: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Color FUCHSIA"); return new Symbol(Simbolos2.fuchsia, yycolumn, yyline, extraerInfo(yytext()));
            } 
            // fall through
          case 227: break;
          case 113: 
            { System.out.println("Se reconocio "+yytext()+" de tipo HEXADECIMAL"); return new Symbol(Simbolos2.Hexa, yycolumn, yyline, extraerInfo(yytext()));
            } 
            // fall through
          case 228: break;
          case 114: 
            { System.out.println("Se reconocio "+yytext()+" de tipo SANGRIA"); return new Symbol(Simbolos2.blockquote, yycolumn, yyline, yytext());
            } 
            // fall through
          case 229: break;
          case 115: 
            { System.out.println("Se reconocio "+yytext()+" de tipo JUSTIFIED"); return new Symbol(Simbolos2.justifiedC, yycolumn, yyline, extraerInfo(yytext()));
            } 
            // fall through
          case 230: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
